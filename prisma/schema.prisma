generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  name         String
  phone        String?
  address      String?
  balance      Float         @default(0)
  role         Role          @default(USER)
  dailyBetLimit Float        @default(5000) // Limite diário de apostas padrão: R$ 5000
  totalBets    Float         @default(0)    // Total de apostas realizadas
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bets         Bet[]
  transactions Transaction[]
  messages     ChatMessage[]
}

model Bet {
  id        String     @id @default(cuid())
  userId    String
  amount    Float
  type      BetType
  result    BetResult?
  createdAt DateTime   @default(now())
  roundId   String
  round     Round      @relation(fields: [roundId], references: [id])
  user      User       @relation(fields: [userId], references: [id])
}

model Round {
  id          String      @id @default(cuid())
  result      Float
  startTime   DateTime    @default(now())
  endTime     DateTime
  status      RoundStatus @default(BETTING)
  houseProfit Float       @default(0)
  bets        Bet[]
}

model Transaction {
  id        String            @id @default(cuid())
  userId    String
  amount    Float
  type      TransactionType
  status    TransactionStatus @default(PENDING)
  details   String?           @default("{}")
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
}

model ChatMessage {
  id           String    @id @default(cuid())
  text         String
  sender       String    @default("USER") // "USER", "ADMIN", "SYSTEM"
  userId       String?
  userName     String?
  userEmail    String?
  recipientId  String?   // ID do destinatário se for mensagem direta
  timestamp    DateTime  @default(now())
  read         Boolean   @default(false)
  isFinal      Boolean   @default(false)
  isImage      Boolean   @default(false)
  fileInfo     Json?     // Armazenar informações de arquivo como JSON
  expiresAt    DateTime  // Data de expiração (24h após a criação)
  user         User?     @relation(fields: [userId], references: [id])
}

// Modelo para armazenar configurações do sistema
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum BetType {
  ABOVE
  BELOW
}

enum BetResult {
  WIN
  LOSE
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

enum TransactionStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum RoundStatus {
  BETTING
  RUNNING
  FINISHED
}
